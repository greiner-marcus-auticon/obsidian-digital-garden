#!/bin/bash

# Function to find the Python executable path
find_python() {
  if command -v python3 &>/dev/null; then
    echo "$(command -v python3)"
  elif command -v python &>/dev/null; then
    echo "$(command -v python)"
  else
    echo "Python is not installed" >&2
    exit 1
  fi
}

# Function to remove the temporary file, markdown_files.txt
remove_temp_file() {
  echo "Removing the temporary file..."
  rm markdown_files.txt
}

echo "Finding Python executable path..."

# Get the Python executable path
PYTHON_PATH=$(find_python)
echo "Python executable path: $PYTHON_PATH"

if [ $? -ne 0 ]; then
  echo "Failed to find Python executable path."
  exit 1
fi

echo "Changing to the repository root..."

# Change to the repository root
REPO_ROOT=$(git rev-parse --show-toplevel)
cd "$REPO_ROOT" || { echo "Failed to change to the repository root."; exit 1; }
echo "Repository root: $REPO_ROOT"

echo "Checking for new or modified markdown files in the _notes/Public directory..."

# Get the list of new or modified markdown files in the _notes/Public directory and subdirectories
MARKDOWN_FILES=$(git diff --name-status --cached | grep -E '^[AM].*_notes/Public/.*\.md$' | cut -f2)
echo "Markdown files found:"
echo "$MARKDOWN_FILES"

if [ -z "$MARKDOWN_FILES" ]; then
  echo "No new or modified Markdown files in the _notes/Public folder."
  exit 0
fi

# Convert the list of files into an array using newline as the delimiter
IFS=$'\n' read -r -d '' -a files_array < <(printf '%s\0' "$MARKDOWN_FILES")

echo "Files in array:"
for file in "${files_array[@]}"; do
  echo "$file"
done

# Set the PYTHONIOENCODING environment variable to UTF-8
export PYTHONIOENCODING=UTF-8

# Execute the Python script with the list of markdown files
echo "Python script command: \"$PYTHON_PATH\" add_front_matter.py \"${files_array[@]}\""
"$PYTHON_PATH" add_front_matter.py "${files_array[@]}"

if [ $? -ne 0 ]; then
  echo "Failed to execute the Python script."
  exit 1
fi

# Check if markdown_files.txt exists
if [ ! -f "markdown_files.txt" ]; then
  echo "markdown_files.txt does not exist."
  exit 1
fi

echo "Finding markdownlint-cli2..."

# Find the location of markdownlint-cli2
MARKDOWNLINT_CLI2_PATH=$(command -v markdownlint-cli2)
echo "markdownlint-cli2 path: $MARKDOWNLINT_CLI2_PATH"

if [ -z "$MARKDOWNLINT_CLI2_PATH" ]; then
  echo "Failed to find markdownlint-cli2. Please install it and add it to your PATH."
  exit 1
fi

echo "Linting Markdown files..."

# Read each file from markdown_files.txt and lint it
while IFS= read -r file; do
  # Ensure the full path is correctly derived and trim any whitespace, also replace backslashes with forward slashes
  file_path=$(echo "$REPO_ROOT/$file" | tr -d '\r' | tr '\\' '/')
  echo "Derived file path: \"$file_path\""

  if [ ! -f "$file_path" ]; then
    echo "File not found: \"$file_path\""
    exit 1
  fi

  # Print the name of the file
  echo "Processing file: \"$file_path\""

  # Lint the file
  echo "Linting command: \"$MARKDOWNLINT_CLI2_PATH\" --fix --config \"$REPO_ROOT/.markdownlint.jsonc\" \"$file_path\""
  "$MARKDOWNLINT_CLI2_PATH" --fix --config "$REPO_ROOT/.markdownlint.jsonc" "$file_path"

  if [ $? -ne 0 ]; then
    echo "Failed to lint file: \"$file_path\""
    remove_temp_file
    exit 1
  fi
done < "markdown_files.txt"

remove_temp_file

if [ $? -ne 0 ]; then
  echo "Failed to remove the temporary file."
  exit 1
fi

echo "Pre-commit hook completed."
